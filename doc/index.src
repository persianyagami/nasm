\IR{-D} \c{-D} option
\IR{-E} \c{-E} option
\IR{-F} \c{-F} option
\IR{-I} \c{-I} option
\IR{-L} \c{-L} option
\IR{-M} \c{-M} option
\IR{-MD} \c{-MD} option
\IR{-MF} \c{-MF} option
\IR{-MG} \c{-MG} option
\IR{-MP} \c{-MP} option
\IR{-MQ} \c{-MQ} option
\IR{-MT} \c{-MT} option
\IR{-MW} \c{-MW} option
\IR{-O} \c{-O} option
\IR{-P} \c{-P} option
\IR{-U} \c{-U} option
\IR{-X} \c{-X} option
\IR{-a} \c{-a} option
\IR{-d} \c{-d} option
\IR{-e} \c{-e} option
\IR{-f} \c{-f} option
\IR{-g} \c{-g} option
\IR{-i} \c{-i} option
\IR{-l} \c{-l} option
\IR{-o} \c{-o} option
\IR{-p} \c{-p} option
\IR{-s} \c{-s} option
\IR{-u} \c{-u} option
\IR{-W} \c{-W} option
\IR{-t} \c{-t} option
\IR{-soname} \c{-soname}, linker option
\IR{-Werror} \c{-Werror} option
\IR{-Wno-error} \c{-Wno-error} option
\IR{-w} \c{-w} option
\IR{-Z} \c{-Z} option
\IR{!=} \c{!=} operator
\IR{$, here} \c{$}, current address
\IR{$, prefix} \c{$}, prefix
\IR{$$} \c{$$}
\IR{%} \c{%}, operator
\IR{%db} \c{%}, prefix to \c{DB} lists
\IR{%%} \c{%%} operator
\IR{%+1} \c{%+1} and \c{%-1} syntax
\IA{%-1}{%+1}
\IR{%*?} \c{%*?} and \c{%*??}
\IR{%?} \c{%?} and \c{%??}
\IC{%*?}{_sname} macro name, single line
\IC{%?}{_mname} macro name, multi-line
\IR{%0} \c{%0}
\IR{&} \c{&} operator
\IR{&&} \c{&&} operator
\IR{*} \c{*} operator
\IR{..@} \c{..@} symbol prefix
\IR{/} \c{/} operator
\IR{//} \c{//} operator
\IR{<} \c{<} operator
\IR{<<} \c{<<} operator
\IR{<<<} \c{<<<} operator
\IR{<=>} \c{<=>} operator
\IR{<=} \c{<=} operator
\IR{<>} \c{<>} operator
\IR{<=>} \c{<=>} operator
\IR{=} \c{=} operator
\IR{==} \c{==} operator
\IR{>} \c{>} operator
\IR{>=} \c{>=} operator
\IR{>>} \c{>>} operator
\IR{>>>} \c{>>>} operator
\IR{?db} \c{?}, data syntax
\IR{?op} \c{?}, operator
\IR{^} \c{^} operator
\IR{^^} \c{^^} operator
\IR{|} \c{|} operator
\IR{||} \c{||} operator
\IR{%$} \c{%$} and \c{%$$} prefixes
\IA{%$$}{%$}
\IR{%[} \c{%[}...\c{]}
\IR{+ opaddition} \c{+}, binary operator
\IR{+ opunary} \c{+}, unary operator
\IR{+ modifier} \c{+}, modifier
\IR{- opsubtraction} \c{-}, binary operator
\IR{- opunary} \c{-}, unary operator
\IR{! opunary} \c{!} operator
\IA{~}{~ opunary}
\IR{~ opunary} \c{~} operator
\IA{A16}{a16}
\IA{A32}{a32}
\IA{A64}{a64}
\IA{O16}{o16}
\IA{O32}{o32}
\IA{O64}{o64}
\IR{alignment, in bin sections} alignment, in \c{bin} sections
\IR{alignment, in elf sections} alignment, in ELF sections
\IR{alignment, in win32 sections} alignment, in \c{win32} sections
\IR{alignment, of elf common variables} alignment, of ELF common variables
\IR{alignment, in obj sections} alignment, in \c{obj} sections
\IR{a.out, bsd version} \c{a.out}, BSD version
\IR{a.out, linux version} \c{a.out}, Linux version
\IR{bin} \c{bin} output format
\IR{bitwise and} bitwise AND
\IR{bitwise or} bitwise OR
\IR{bitwise xor} bitwise XOR
\IR{block ifs} block IFs
\IR{borland pascal} Borland, Pascal
\IR{borland's win32 compilers} Borland, Win32 compilers
\IR{braces, after % sign} braces, after \c{%} sign
\IR{bsd} BSD
\IR{c calling convention} C calling convention
\IR{c symbol names} C symbol names
\IA{critical expressions}{critical expression}
\IA{command-line}{command line}
\IA{comments}{comment}
\IR{ccomment} comment, ending in \c{\\}
\IA{case sensitivity}{case sensitive}
\IA{case-sensitive}{case sensitive}
\IA{case-insensitive}{case sensitive}
\IA{character constants}{character constant}
\IR{codeview debugging format} CodeView debugging format
\IR{continuation} continuation line
\IR{common object file format} Common Object File Format
\IR{common variables, alignment in elf} common variables, alignment in ELF
\IR{common, elf extensions to} \c{COMMON}, ELF extensions to
\IR{common, obj extensions to} \c{COMMON}, \c{obj} extensions to
\IR{declaring structure} declaring structures
\IR{default-wrt mechanism} default-\c{WRT} mechanism
\IR{devpac} DevPac
\IR{dfv} DFV
\IR{djgpp} DJGPP
\IR{dll symbols, exporting} DLL symbols, exporting
\IR{dll symbols, importing} DLL symbols, importing
\IA{effective addresses}{effective address}
\IA{effective-address}{effective address}
\IR{elf} ELF
\IR{elf, 16-bit code} ELF, 16-bit code
\IR{elf, debug formats} ELF, debug formats
\IR{elf shared library} ELF, shared libraries
\IR{elf32} ELF, \c{elf32}
\IR{elf64} ELF, \c{elf64}
\IR{elfx32} ELF, \c{elfx32}
\IC{elf}{executable and linkable format} Executable and Linkable Format (ELF)
\IR{extern, elf extensions to} \c{EXTERN}, ELF extensions to
\IR{extern, obj extensions to} \c{EXTERN}, \c{obj} extensions to
\IR{floating-point} floating-point
\IR{floating-point, constants} floating-point, constants
\IA{floating-point constant}{floating-point, constants}
\IA{floating-point constants}{floating-point, constants}
\IR{floating-point, packed bcd constants} floating-point, packed BCD constants
\IR{freebsd} FreeBSD
\IR{freelink} FreeLink
\IR{functions, c calling convention} functions, C calling convention
\IR{functions, pascal calling convention} functions, \c{PASCAL} calling convention
\IR{global, aoutb extensions to} \c{GLOBAL}, \c{aoutb} extensions to
\IR{global, elf extensions to} \c{GLOBAL}, ELF extensions to
\IR{got} GOT
\IR{global offset table} GOT, global offset table
\IR{got relocations} GOT, \c{GOT} relocations
\IR{gotoff relocation} GOT, \c{GOTOFF} relocations
\IR{gotpc relocation} GOT, \c{GOTPC} relocations
\IR{intel number formats} Intel number formats
\IR{linux, elf} Linux, ELF
\IR{linux, a.out} Linux, \c{a.out}
\IR{linux, as86} Linux, \c{as86}
\IR{mach-o} Mach-O, object file format
\IA{mach object file format}{mach-o}
\IA{macho}{mach-o}
\IR{macho32} Mach-O, \c{macho32}
\IR{macho64} Mach-O, \c{macho64}
\IR{macos x} MacOS X
\IR{masm} MASM
\IR{masmdb} MASM, \c{DB} syntax
\IR{masm compatibility} MASM, compatibility
\IA{memory reference}{memory references}
\IR{minix} Minix
\IA{misc directory}{misc subdirectory}
\IR{misc subdirectory} \c{misc} subdirectory
\IR{microsoft omf} Microsoft OMF
\IR{mixed-size addressing} mixed-size, addressing
\IR{mixed-size instruction} mixed-size, instruction
\IR{ms-dos} MS-DOS
\IR{ms-dos device drivers} MS-DOS, device drivers
\IA{dos}{ms-dos}
\IA{multi-line macro}{multi-line macros}
\IR{multi-line macro expansion} multi-line macro, expansion
\IR{multipush} \c{multipush} macro
\IR{nan} NaN
\IR{nasm version} NASM version
\IR{nasm version history} NASM version, history
\IR{nasm version macros} NASM version, macros
\IR{nasm version id} NASM version, ID macro
\IR{nasm version string} NASM version, string macro
\IR{arithmetic negation} negation, arithmetic
\IR{bitwise negation} negation, bitwise
\IR{boolean negation} negation, boolean
\IR{boolean and} boolean, AND
\IR{boolean or} boolean, OR
\IR{boolean xor} boolean, XOR
\IR{netbsd} NetBSD
\IR{nsis} NSIS
\IR{nullsoft scriptable installer} Nullsoft Scriptable Installer
\IA{.OBJ}{.obj}
\IR{omf} OMF
\IR{openbsd} OpenBSD
\IR{operating system} operating system
\IR{os/2} OS/2
\IR{pascal calling convention} Pascal calling convention
\IR{pic} PIC
\IR{pharlap} PharLap
\IR{plt} PLT, procedure linkage table
\IR{plt relocations} PLT, relocations
\IC{plt}{procedure linkage table} procedure linkage table
\IA{pre-defining macros}{pre-define}
\IR{preprocessor conditionals} preprocessor, conditionals
\IR{preprocessor directives} preprocessor, directives
\IR{preprocessor expansions} preprocessor, expansions
\IR{preprocessor expressions} preprocessor, expressions
\IR{preprocessor functions} preprocessor, functions
\IR{preprocessor loops} preprocessor, loops
\IR{preprocessor variables} preprocessor, variables
\IC{preprocessor variables}{vpp} variables, preprocessor
\IR{other preprocessor directives} preprocessor, other directives
\IR{stack relative preprocessor directives} preprocessor, stack relative directives
\IA{comments}{comment}
\IR{relocations, pic-specific} relocations, PIC-specific
\IA{repeating}{repeating code}
\IR{section alignment, in elf} section alignment, in ELF
\IR{section alignment, in bin} section alignment, in \c{bin}
\IR{section alignment, in obj} section alignment, in \c{obj}
\IR{section alignment, in win32} section alignment, in \c{win32}
\IR{section, bin extensions to} \c{SECTION}, \c{bin} extensions to
\IR{section, elf extensions to} \c{SECTION}, ELF extensions to
\IR{section, macho extensions to} \c{SECTION}, Mach-O extensions to
\IR{section, windows extensions to} \c{SECTION}, Windows extensions to
\IR{segment alignment, in bin} segment alignment, in \c{bin}
\IR{segment alignment, in obj} segment alignment, in \c{obj}
\IR{segment, obj extensions to} \c{SEGMENT}, \c{obj} extensions to
\IR{segment names, borland pascal} segment names, Borland Pascal
\IR{shift command} \c{shift} command
\IA{string constant}{string constants}
\IR{string constants} string, constants
\IR{string length} string, length
\IR{string manipulation in macros} string, manipulation in macros
\IR{align, smart} \c{ALIGN}, smart
\IA{sectalign}{sectalign}
\IR{solaris x86} Solaris x86
\IC{solaris x86}{unix, solaris} Unix, Solaris
\IA{standard section names}{standardized section names}
\IR{symbols, exporting from dlls} symbols, exporting from DLLs
\IR{symbols, importing from dlls} symbols, importing from DLLs
\IR{tasm} TASM
\IR{test subdirectory} \c{test} subdirectory
\IR{thread local storage in elf} thread local storage, in ELF
\IR{thread local storage in mach-o} thread local storage, in Mach-O
\IR{macho} Mach-O
\IR{tlink} \c{TLINK}
\IR{tls} \c{TLS}
\IA{tls}{thread local storage}
\IR{unconditionally importing symbols} importing symbols, unconditionally
\IR{underscore, in c symbols} underscore, in C symbols
\IR{uninitialized} uninitialized storage
\IC{uninitialized storage}{storage, uninitialized}
\IC{RESB}{uninitialized, resb} uninitialized storage, \c{RES}\e{x}
\IC{?db}{uninitialized, db} uninitialized storage, \c{D}\e{x}\e{ ?}
\IR{unicode} Unicode
\IR{unix} Unix
\IR{utf-8} Unicode, UTF-8
\IR{utf-16} Unicode, UTF-16
\IR{utf-32} Unicode, UTF-32
\IA{sco unix}{unix, sco}
\IR{unix, sco} Unix, SCO
\IA{unix system v}{unix, system v}
\IR{unix, system v} Unix, System V
\# Having just "UnixWare" is rather silly as it follows immediately
\IR{unixware} Unix, UnixWare
\IC{linux}{unix, linux} Unix, Linux
\IC{bsd}{unix, bsd} Unix, BSD
\IR{x32} x32 ABI (ELF)
\IR{val} VAL
\IA{version number of nasm}{nasm, version}
\IR{visual c++} Visual C++
\IR{win32} Win32
\IR{win64} Win64
\IR{windows} Windows
\IR{windows debugging formats} Windows, debugging formats
\IR{__?USE_*?__} \c{__?USE_}\e{package}\c{?__}
\IR{default, elf} \c{default}, ELF visibility
\IR{hidden, elf} \c{hidden}, ELF visibility
\IR{protected, elf} \c{protected}, ELF visibility
\IR{internal, elf} \c{internal}, ELF visibility
\IR{elf visibility} ELF visibility
\IC{elf visibility}{visibility, elf} visibility, ELF
\IR{unknown %if} \c{%if}, backwards compatibility
\IC{unknown %if}{unknown %elif} \c{%elif}, backwards compatibility
\IC{unknown %if}{unknown %ifn} \c{%ifn}, backwards compatibility
\IC{unknown %if}{unknown %elifn} \c{%elifn}, backwards compatibility
\IR{apx} APX
\IR{advanced programming extensions} Advanced Programming Extensions
\IA{egprs}{egpr}
\IR{egpr} EGPR
\IC{egpr}{extended general purpose register}
\IA{extended general purpose registers}{egpr}
\IR{apx syntax} APX, syntax
\IC{apx syntax}{syntax, apx} syntax, APX
\IR{scc} S\e{cc}
\IR{apx optimizer} APX, optimizer
\# \IC{program entry point}{entry point, program}
\# \IC{program entry point}{start point, program}
\# \IC{MS-DOS device drivers}{device drivers, MS-DOS}
\# \IC{16-bit mode, versus 32-bit mode}{32-bit mode, versus 16-bit mode}
\# \IC{c symbol names}{symbol names, in C}
\IR{WRT ..got} \c{WRT}, \c{..got}
\IR{WRT ..gotoff} \c{WRT}, \c{..gotoff}
\IR{WRT ..gotpc} \c{WRT}, \c{..gotpc}
\IR{WRT ..plt} \c{WRT}, \c{..plt}
\IR{WRT ..sym} \c{WRT}, \c{..sym}
\IR{rex2} REX2 prefix
